#!/usr/bin/env ruby
# should2expect

# 20150123
# 0.8.0

# Changes since 0.7:
# 1. I forgot to carry the transform for =~ over since 0.2!
# 2. + input_filenames().
# 3. + main().

# Notes: 
# 1. be_nil() does not satisfy a deprecation, but rather is stylistic
# and makes use of an existing matching which is more apropos.
# 2. has() must be before verbs().
# 3. does_not() must be before verbs() also.

def transforms(contents)
  to(contents)
  not_to(contents)
  eq(contents)
  match(contents)
  be_nil(contents)
  allow(contents)
  allow_any_instance_of(contents)
  receive(contents)
  has(contents)
  does_not(contents)
  verbs(contents)
end

def eq(contents)
  contents.gsub!(/ *\.(should|to) ==( *)(.+)/, "\.to\\2eq(\\3)")
end

def match(contents)
  contents.gsub!(/ *\.(should|to) =~( *)(.+)/, "\.to\\2match(\\3)")
end

def to(contents)
  contents.gsub!(/( *)(.+)\.should( +)/, "\\1expect(\\2).to\\3")
end

def not_to(contents)
  contents.gsub!(/( *)(.+)\.should_not( +)/, "\\1expect(\\2).not_to\\3")
end

def be_nil(contents)
  contents.gsub!(/eq(nil)/, "be_nil")
end

def allow(contents)
  contents.gsub!(/( *)(.+)\.stub\((.+?)\)/, "\\1allow(\\2).to receive(\\3)")
end

def allow_any_instance_of(contents)
  contents.gsub!(/( *)(.+)\.any_instance_of\.stub\((.+?)\)/, "\\1allow_any_instance_of(\\2).to receive(\\3)")
end

def receive(contents)
  contents.gsub!(/( *)(.+)\.should_receive\((.+?)\)/, "\\1expect(\\2).to receive(\\3)")
end

def has(contents)
  contents.gsub!(/( *)it([ \(])(['"])should have (.*?)(['"])([ \)])do/, "\\1it\\2\\3has \\4\\5\\6do")
end

def does_not(contents)
  contents.gsub!(/( *)it([ \(])(['"])should not (.*?)(['"])([ \)])do/, "\\1it\\2\\3does not \\4\\5\\6do")
end

def verbs(contents)
  contents.gsub!(/( *)it([ \(])(['"])should (\w+) (.*?)(['"])([ \)])do/, "\\1it\\2\\3\\4s \\5\\6\\7do")
end

def input_filenames
  input_filenames = (
    if ARGV[0]
      if File.directory?(ARGV[0])
        Dir["#{ARGV[0]}/**/*"]
      else
        Dir[ARGV[0]]
      end
    else
      Dir['*']
    end
  )
  input_filenames.reject! do |input_filename|
    File.directory?(input_filename)
  end
  input_filenames
end

def main
  input_filenames.each do |input_filename|
    contents = File.read(input_filename)
    transforms(contents)
    File.write(input_filename, contents)
  end
end

main
